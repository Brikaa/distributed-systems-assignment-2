- Admins
  - Delete users, set users as admins, edit users info
    - Edit users info, suspend users?
  - Accept/reject new course content
    - What is course content?
  - View courses, sort by ratings, search (by name, category)
  - View detailed course
  - Remove courses
  - Edit course details, add/remove content to it
  - Track platform usage (number of registered students, number of registered instructors)
    - Page hits?
  - View courses, their popularity (the number of enrolled students)
  - View a course's ratings (average number of stars, individual stars)
  - View a course's reviews (individual reviews)

- Instructors
  - Register, log in
  - View user info
  - Update user info (change password, experience, bio)
  - Create a course
  - View courses, sort by ratings, search (by name, category) (my courses and all courses)
  - View detailed course
  - Upload/delete course material
  - Accept/reject student enrollment

- Students
  - Register, log in
  - View user info
  - Update user info (change password, bio)
  - View courses, sort by ratings, search (by name, category)
  - View detailed course
  - View current (accepted) and past enrollments (finished, rejected)
    - Real time notifications?
  - Create course enrollment
  - Cancel course enrollment
  - View notifications (course enrollment updates)
  - Rate a course
  - Review a course

- Technical debt
  - A way to freeze time.now() for tests
  - Use the application server's or a third part connection pool
  - Don't cast to text when comparing UUID
  - Abstract transactions?
  - Document that course startDate and endDate are in epoch seconds
  - Use remote ActiveMQ
  - Send notifications for runtime errors during asynchronous processing
  - Use SQL transactions in reviews
  - ResultSet rs, if (rs.next()) -> if (st.executeQuery().next())
  - Generic function to make sure request is not empty

- Assumptions
  - Instructors can create courses without approvals
  - Instructors need approval to add course content
  - Cancelling an enrollment means deleting it
  - Enrollments for future/current courses are considered "current" enrollments
  - Enrollments for courses that have ended are considered "past" enrollments
  - Platform usage is
    - Number of registered students, instructors, admins
    - Number of courses
    - Number of 'ACCEPTED' enrollments
    - Number of 'REJECTED' enrollments
  - Users can only review the courses that have ended and they had an accepted enrollment in

- Splitting into microservices
  - Possible microservices
    - Users, auth
    - Courses, reviews, enrollments
    - Notifications

  - Cross-cutting concerns
    - For each course, need to get the instructor name (get instructor names endpoint?)
    - For each enrollment, need to get the student name (get student name endpoint?)
    - For each review, need to get the student name (get student name endpoint?)

  - How to handle authorization?
    - API gateway
      - Single point of entry to the API that does authorization
      - API gateway adds user info to the request
      - What if services need to communicate with each other (A -> B)
        - Need to put user info in request
    - Auth service (chosen)
      - Multiple points of entries, each communicate with the Auth service
      - Auth service returns info about user
      - What if services to communicate with each other?
        - Duplicate auth?
        - Need to put auth info in request

  - Auth endpoint details
    - Takes basic auth token
    - Returns user info or 401

- Test improvements
  - Test instructor search
  - Test failure in MDB

- Test todo
  - Admin manage user accounts
  - Test enrolling in a full course
  - Test accepting enrollment in a full course
  - Test enrolling in a current course
  - Test accepting enrollment in a current course
  - Test review is at proper time
